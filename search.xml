<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2019-19781远程代码执行漏洞深入分析</title>
      <link href="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/"/>
      <url>/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2019-19781远程代码执行漏洞深入分析"><a href="#CVE-2019-19781远程代码执行漏洞深入分析" class="headerlink" title="CVE-2019-19781远程代码执行漏洞深入分析"></a>CVE-2019-19781远程代码执行漏洞深入分析</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>虚拟机下载地址：<a href="https://www.citrix.com/downloads/citrix-gateway/" target="_blank" rel="noopener">https://www.citrix.com/downloads/citrix-gateway/</a></p><p>然后选择下载NSVPX-ESX-13.0-47.22_nc_64.zip这个文件，该文件是ovf，可以直接用vmware来倒入并打开</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/1.png" alt="1"></p><p>选择导入</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/2.png" alt="2"></p><p>先后配置 IP地址，子网掩码，的网关地址，然后选择4确认</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/3.png" alt="3"></p><p>默认用户名密码都是 nsroot</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/4.png" alt="4"></p><p>然后访问之前设置的IP地址，出现以下界面则环境搭建成功</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/5.png" alt="5"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>网上下载exp 下载地址 <a href="https://codeload.github.com/jas502n/CVE-2019-19781/zip/master" target="_blank" rel="noopener">https://codeload.github.com/jas502n/CVE-2019-19781/zip/master</a></p><p>使用方式</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/6.png" alt="6"></p><p>输入要执行的命令</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/7.png" alt="7"></p><p>漏洞复现成功</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/8.png" alt="8"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>首先查看我们的请求路径，由于利用了目录遍历漏洞，所以访问的真实uri路径是</p><p>/vpns/portal/scripts/newbm.pl</p><p>我们去Apache 的配置文件httpd.conf 中看一下路径的配置，这里简单解释下这几项配置</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/9.png" alt="9"></p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/10.png" alt="10"></p><p>首先介绍一个MOD_PERL技术</p><p>MOD_PERL技术将PERL解析器编译到APACHE服务器中一起等待客户端请求。<br>MOD_PERL技术在APACHE中一共有三种代码运行方式：<br>PerlRun模式：这个模式主要兼容旧式CGI程序，仅仅使用APACHE中的PERL解析器对代码进行解析不进行缓冲。<br>Registry模式：这个模式的Perl代码在被访问过以后会被编译成为APACHE API模块并且存储在缓冲之中，为了保证运行APACHE会选择性的产生、不只一个副本在内存中。<br>APACHE API模式：这个模式在APACHE启动的时候就直接将代码编译驻留在缓冲之中。</p><p>配置完Apache和Perl模块后，可以用perlinfo函数查看系统环境相关变量。下图是在虚拟机中跑出来的效果，用的是XAMPP套件的老版本。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/11.png" alt="11"></p><p>实现MOD_PERL技术，就需要我们先编写一个APACHE模块代码</p><p>例子</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/12.png" alt="12"></p><p>然后再在http.conf里做如下的配置</p><pre class=" language-xml"><code class="language-xml">PerlModule example;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Location</span> <span class="token attr-name">"(service)$"</span><span class="token punctuation">></span></span>        SetHandler perl-script        PerlHandler example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">></span></span> </code></pre><p>这样当用户访问的时候会被这个APACHE模块处理。</p><p>正常情况下我们是无法访问/vpns/portal/这个路径下的任何东西的，因为路径限制我们访问不到，但是恰好这次该系统还有一个目录遍历漏洞，这样我们可以访问的范围就扩大了不少</p><p>首先我们攻击的第一步会请求一个uri “/vpn/../vpns/portal/scripts/newbm.pl”</p><p>我们首先看一下</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/13.png" alt="13"></p><p>这里的Handler模块 我们访问 Citrix ADC VPX 虚拟机的以下路径</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/14.png" alt="14"></p><p>可以看到该路径下有以下文件</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/15.png" alt="15"></p><p>后缀为.pm的文件 即为Perl Module，也就是 Perl 模块。在这里我们看到了处理请求/vpns/portal的默认木块 Handler.pm</p><p>我们打开看一下源码</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/16.png" alt="16"></p><p>该模块只有两个函数 error函数没什么好看的，我们重点观察handler函数。</p><p>不难发现handler函数中调用了另一个模块UserPrefs模块，调用了UserPrefs的一个new方法</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/17.png" alt="17"></p><p>new( ) 方法是对象的构造函数。我们去观察一下UserPrefs的源码</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/18.png" alt="18"></p><p>构造函数是类的子程序，它返回与类名相关的一个引用。将类名与引用相结合称为“祝福”一个对象，因为建立该结合的函数名为 bless ( )，其语法为：</p><pre class=" language-perl6"><code class="language-perl6">bless YeReference [,classname]</code></pre><p><code>YeReference</code> 是对被“祝福”的对象的引用，<code>classname</code> 是可选项，指定对象获取方法的包名，其缺省值为当前包名。既在当前代码中返回一个名为UserPrefs的对象。然后我们调用UserPrefs对象的csd（）方法。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/19.png" alt="19"></p><p>我们看一下csd ()方法的实现细节</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/20.png" alt="20"></p><p>结合网上的exp我们发现了一个关键的变量</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/21.png" alt="21"></p><p>以下是EXP的源码</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/22.png" alt="22"></p><p>这个username参数存储的是我们客户端传递来的 请求头中的“NSC_USER”的值。</p><p>我们看看exp中是怎么定义这个值的。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/23.png" alt="23"></p><p>“NSC_USER”的值中的%cdl值是一个随机值，主要用于写入文件的文件名</p><p>至于对”NSC_NONCE”这个请求头的处理，只是做了简单的字符串校验，并不是说校验了用户名和密码，所以第二次请求访问后台生成的XML时，”NSC_NONCE”“NSC_USER”两个请求头的值可以是任意不含特殊字符的字符串，所以该漏洞利用时并不需要提前知道后台登陆密码。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/24.png" alt="24"></p><p>根据上面的源码截图我们看到了username的值，接下来我们看程序是如何处理username这个变量的。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/25.png" alt="25"></p><p>可以看到在第61行代码调用了 fileread函数并将username变量作为参数传入</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/26.png" alt="26"></p><p>我们看到这这么一行注释</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/27.png" alt="27"></p><p>如果文件不存在或者已删除，则根据username创建一个新的文档。看到这里我们大致明白了这段代码的作用，就是以username变量为依据判断某路径下是否有同名文件的存在，如果文件不存在或者已删除已损毁则以username作为文件名创建一个文件。</p><p>那么这个创建的文件存放在哪里我们在源码中查找一下</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/28.png" alt="28"></p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/29.png" alt="29"></p><p>可以看到 默认生成文件的路径是“/var/vpn/bookmark”, 也就是说正常情况下我们访问，生成的和username同名的文件时在该路径下的。</p><p>但是由于生成文件时并未对传入的“NSC_USER”这个头部有任何过滤。其实应该是有的，只不过默认情况下是给注释掉了。由下图的注释可以看出</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/30.png" alt="30"></p><p>所以在没有过滤的情况下，程序就以“../../../netscaler/portal/templates/filename” 这样生成的文件就保存在了，我们可以通过目录遍历漏洞访问到的目录下了。</p><p>此时我们可以控制，服务端程序在指定目录下创建文件了，但是仅仅这样是不够的，我们还需要将我们的payload一起写入我们的文件中。</p><p>我们已经知道了，如果要在指定位置创建文件，就需要在执行时调用UserPrefs对象的csd()方法。以此为依据，再能访问的范围内寻找可以利用的类。我翻看了一下，有不少类中都调用了UserPrefs对象的csd()方法，但是并有可以用来写入payload的点，例如themes.pl，可以调用UserPrefs对象的csd()方法生成文件，但是却无法向文件中写入payload，我们测试一下，先修改一下exp，将第一次请求的文件改成themes.pl</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/31.png" alt="31"></p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/32.png" alt="32"></p><p>虽然会提示上传失败，但是我们直接从后台来看确实生成了一个同名的xml文档，</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/33.png" alt="33"></p><p>看一下这个xml文档的内容</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/34.png" alt="34"></p><p>很显然这样生成的xml文档里没有任何有价值的或者可以利用的东西</p><p>我们经过一段时间查看源码发现了一个有利用价值的perl程序，即请求路径为“/vpns/portal/scripts/newbm.pl”实际物理路径为”/netscaler/portal/scripts/newbm.pl”的newbm模块。通过下图我们可以看到在http.conf中配置 Alias的作用是别名配置</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/10.png" alt="10"></p><p>我们看一下newbm.pl的源码</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/35.png" alt="35"></p><p>我们从源码中可以看到 newbm.pl 满足了我们所需要的条件，</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/36.png" alt="36"></p><p>首先调用了UserPrefs对象的csd()方法生成文件</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/37.png" alt="37"></p><p>然后用四个变量接受我们从前台POST传入的payload，然后存储到一个哈希中，经测试”title”,”UI_inuse”,”descr”均可用来写入payload</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/38.png" alt="38"></p><p>最中我们通过POST传入的四个参数，被写入到我们通过UserPrefs对象的csd()方法生成xml文档中了。以下截图就是该文档的最终形态。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/39.png" alt="39"></p><p>我们可以看到，我们要执行的payload语句已经写入 bookmark标签的“title”标签中了。</p><p>至此exp的第一次请求结束，所做的事情就是指定在服务端的“/netscaler/portal/templates/”路径下生成一个xml文档，然后向该文档内写入payload。</p><p>接下来就是exp执行的第二步</p><p>也就是我们要想办法访问到这个xml文档，然后还能够让程序解析并执行我们的payload也就是</p><p>[% template.new(‘BLOCK’ = ‘print <code>"+ cmd + "</code>‘) %]  这串代码</p><p>按照顺序来，我们先考虑如何可以访问这个xml文档。首先第一反应就是去看http.conf文件，生成的xml文档的物理路径是“/netscaler/portal/templates/” 看一看有没有该路径的一个映射地址，这样我们就可以直接访问了，可惜并没有，也就是说像exp第一步直接访问newbm.pl的方式是行不通了。但是此时我们回到一开始的原点，即访问路径“/vpns/portal/”的默认处理模块 Handler.pm</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/40.png" alt="40"></p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/41.png" alt="41"></p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/42.png" alt="42"></p><p>我们观察上面两个截图的代码，我在后台搜过半天并没有发现这个”$r-path_info()”方法属于那个模块，不过根据这个if判断 用的是eq来对比切用来对比的是一个具体的文件名称，紧接着就将“$r-path_info()”返回的结果赋值给了“tmplfile”变量，接下来很关键，也是该漏洞最中可以访问我们生成的xml文档并解析执行其中payload的根本原因，</p><p>“template”变量指向的是Template对象的一个引用，我们可以看到“Template-&gt;new{}”是创建一个Template对象。</p><p>这里Template是perl的一个模块，Template Toolkit。</p><p>简单介绍一下Template Toolkit，在许多使用Perl进行“模板化”的方法中，Template Toolkit被广泛认为是功能最丰富的工具之一。与其他模板系统一样，模板工具包允许程序员将Perl代码和自定义宏嵌入HTML文档中，以便即时创建自定义文档。但是与其他工具不同，Template Toolkit在生成HTML方面与在生成XML，PDF或任何其他输出格式时一样容易。</p><p>看到这里我们应该明白了，Template Toolkit就是perl下的一个功能非常强大的模板引擎，那这么一来，一切就都解释的通了，</p><p>接下来就在第32行我们调用“Template-&gt;process()”方法，process()调用 该方法来处理指定为第一个参数的模板$input。这可以是文件名，文件句柄（例如GLOB或IO::Handle）或对包含模板文本的文本字符串的引用。可以传递包含模板变量定义的其他哈希引用。</p><p>我们的xml文档里写入的payload之所以可以被解析并执行就是因为调用了Template对象的process方法，具体该模板引擎是如何解析xml文档的，牵扯到语法生成树和语义分析限于篇幅原因就不细讲了，感兴趣的朋友可以自己深入去了解学习</p><p>这里我们演示一下这个模板引擎解析的效果。</p><p><img src="/2020/05/31/cve-2019-19781-yuan-cheng-dai-ma-zhi-xing-lou-dong-shen-ru-fen-xi/43.png" alt="43"></p><p>更多的关于Template Toolkit这个模板引擎的功能非常强大而且教程网上也有很多，大家可以自行去学习和使用。</p><p>至此CVE-2019-19781 Citrix ADC远程代码执行漏洞，分析完毕。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java框架级SSM代码审计思路</title>
      <link href="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/"/>
      <url>/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/</url>
      
        <content type="html"><![CDATA[<p><strong>Java框架级SSM代码审计思路</strong></p><p><a href="#ssm框架简介">1 SSM框架简介 1</a></p><p><a href="#springmvc">1.1 SpringMVC 2</a></p><p><a href="#spring">1.2 Spring 2</a></p><p><a href="#mybatis">1.3 Mybatis 2</a></p><p><a href="#servlet">1.4 Servlet 2</a></p><p><a href="#ssm框架代码执行流程和审计思路">2 SSM框架代码执行流程和审计思路 3</a></p><p><a href="#审计的出发点web.xml">2.1 审计的出发点web.xml 3</a></p><p><a href="#spring核心配置文件applicationcontext.xml">2.2 Spring核心配置文件applicationContext.xml<br>4</a></p><p><a href="#ssm之springmvc执行流程">2.3 SSM之SpringMVC执行流程 6</a></p><p><a href="#ssm之spring执行流程">2.4 SSM之Spring执行流程 9</a></p><p><a href="#ssm之mybatis执行流程">2.5 SSM之Mybatis执行流程 11</a></p><p><a href="#审计的重点filter过滤器">2.6 审计的重点filter过滤器 18</a></p><p><a href="#ssm框架审计思路总结">3 SSM框架审计思路总结 27</a></p><p><a href="#思路总结">3.1 思路总结 27</a></p><p><a href="#补充知识">3.2 补充知识 28</a></p><p><a href="#学习建议">3.3 学习建议 28</a></p><h1 id="SSM框架简介"><a href="#SSM框架简介" class="headerlink" title="SSM框架简介"></a>SSM框架简介</h1><p>SSM框架，即SpringMVC+Spring+Mybatis三个开源框架整合在一起的缩写。</p><p>在SSM框架之前生产环境中SSH框架占据多数，即Struts2+Spring+Hibernate三个开源框架整合而成。后因Struts2爆出众多高危漏洞，导致目前SSM逐渐代替SSH成为主流开发框架的选择。</p><p>审计SSM框架首先就要对MVC设计模式和，web三层架构有一定程度的了解，限于篇幅原因这里就简单介绍一下</p><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>是一种基于Java的实现MVC设计模式的请求驱动类型的轻量级Web框架，使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发。</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>是分层的 Java SE/EE full-stack 轻量级开源框架，以 IOC（Inverse of<br>Control，控制反转）和 AOP（Aspect Oriented<br>Programming，面向切面编程）为内核，使用基本的 JavaBean 完成以前只可能由 EJB<br>完成的工作，取代了 EJB<br>臃肿和低效的开发模式，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益</p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis<br>避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis<br>可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java<br>Objects,普通的 Java对象)映射成数据库中的记录。</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>还有一项技术虽然名称没有出现在这三个开源框架中但是SpringMVC的底层就是以此技术进行构建的，这项技术就是Servlet</p><p>Servlet是基于Java技术的Web组件，由容器管理并产生动态的内容。Servlet与客户端通过Servlet容器实现的请求/响应模型进行交互。</p><p>相对以SSM框架搭建的java web项目进行审计，上述这些都是要有一定程度的了解的。</p><h1 id="SSM框架代码执行流程和审计思路"><a href="#SSM框架代码执行流程和审计思路" class="headerlink" title="SSM框架代码执行流程和审计思路"></a>SSM框架代码执行流程和审计思路</h1><h2 id="审计的出发点web-xml"><a href="#审计的出发点web-xml" class="headerlink" title="审计的出发点web.xml"></a>审计的出发点web.xml</h2><p>其实代码审计的核心思想就是追踪参数，而追踪参数的步骤就是程序执行的步骤，说白了代码审计就是一个跟踪程序执行步骤的一个过程，当我们知道了SSM框架的一个执行流程，自然就知道了如何如跟踪一个参数，剩下的就是去观察在参数传递的过程中有没有一些常见的漏洞点。</p><p>我们这里通过一个简单的Demo来描述一下SSM框架搭建的项目是如何完成一次用户请求，它的流程是怎么样的，而参数又是怎样被传递怎样被过滤的，当我们明白了这些，就可以尝试自己上手一些SSM的项目审计。</p><p>首先我把Demo的全部文件和文件结构粘贴出来</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/1.png" alt=""></p><p>这是一个简单的图书管理Demo目录，功能是对图书名称，数量和简介简单的增删改查</p><p>首先不管我们是审计一个项目还是包括Tomcat加载一个项目一般都是由web.xml这个文件开始的</p><p>当然一个项目中没有web.xml也是可以的，可以通过servlet3.0开始提供的一些新注解来达到和配置web.xml一样的效果，但是这样的项目很少会碰到，所以我们以主流的配置web.xml的项目来作为讲解。</p><p>Tomcat会加载web.xml文件读取文件中的内容</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/2.png" alt=""></p><p>web.xml文件主要的工作包括两部分：1、web.xml启动spring容器；2、DispathcheServlet的声明；3、其余工作是session过期，字符串编码等</p><p>首先是生成DispatcherServlet类,DispatcherServlet是前端控制器设计模式的实现，提供Spring<br>Web MVC的集中访问点（也就是把前端请求分发到目标controller），而且与Spring<br>IoC容器无缝集成，从而可以获得Spring的所有好处。</p><p>简单理解就是将我们的请求转发至我们的SpringMVC中去，交由我们SpringMVC的Controller来进行接下来的处理</p><p>然后下面有一个&lt;init-param&gt;子标签，是生成DispatcherServlet时的初始化参数contextConfigLocation参数，Spring会根据这个参数去加载所有逗号分隔的xml文件，如果没有这个参数，Spring默认加载WEB-INF/DispatcherServlet-servlet.xml文件</p><p>下面的&lt;servlet-mapping&gt;标签中还有一个子标签&lt;url-pattern&gt;里面的value是“/”代表拦截所有请求。</p><p>下面的&lt;filter&gt;标签放在后面讲</p><h2 id="Spring核心配置文件applicationContext-xml"><a href="#Spring核心配置文件applicationContext-xml" class="headerlink" title="Spring核心配置文件applicationContext.xml"></a>Spring核心配置文件applicationContext.xml</h2><p>然后我们根据加载顺序去看applicationContext.xml</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/3.png" alt=""></p><p>applicationContext.xml中包含了三个配置文件，这三个配置文件就是我们用Spring来整合SpringMVC和Mybaits的配置文件，其实这三个配置文件中的内容都可以直接写applicationContext.xml中因为applicationContext.xml是Spring的核心配置文件，例如生成Bean，配置连接池，生成sqlSessionFactory。但是为了便于理解，我们这些配置分别写在三个配置文件中，由applicationContext.xml将这三个xml进行关联，由下面这张截图我们可以清晰的看到applicationContext.xml将这三个配置文件关联了起来。</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/4.png" alt=""></p><p>首先数据经由DispatcherServlet派发至Spring-mvc的controller层所以我们先看Spring-mvc.xml这个配置文件</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/5.png" alt=""></p><p>&lt;mvc:annotation-driven /&gt;标签</p><p>如果在web.xml中servlet-mapping的url-pattern设置的是/，而不是如.do。表示将所有的文件，包含静态资源文件都交给spring<br>mvc处理。就需要用到&lt;mvc:annotation-driven<br>/&gt;了。如果不加，DispatcherServlet则无法区分请求是资源文件还是mvc的注解，而导致controller的请求报404错误</p><p>&lt;mvc:default-servlet-handler/&gt;</p><p>在Spring-mvc.xml中配置&lt;mvc:default-servlet-handler /&gt;后，会在Spring<br>MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理，这么做是为了保证Spring-mvc优雅REST风格的资源URL。</p><p>剩下两项一个是指定了返回的view所在的路径，另一个是指定SpringMVC注解的扫描路径</p><p>不难看出这个配置文件中都是和Spring-mvc相关的配置。</p><h2 id="SSM之SpringMVC执行流程"><a href="#SSM之SpringMVC执行流程" class="headerlink" title="SSM之SpringMVC执行流程"></a>SSM之SpringMVC执行流程</h2><p>接下来就是我们SpringMVC<br>controller层接受前台传入的数据,这里我们让demo跑起来以方便演示和讲解</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/6.png" alt=""></p><p>这是我们的index首页，我们看下页面源码</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/7.png" alt=""></p><p>可以看到a标签的超链接是<a href="http://localhost:8080/SSMFrameWorkTest_war/book/allbook" target="_blank" rel="noopener">http://localhost:8080/SSMFrameWorkTest_war/book/allbook</a></p><p>${pageContext.request.contextPath}</p><p>是JSP取得绝对路径的方法,<br>也就是取出部署的应用程序名或者是当前的项目名称,这样当我们把项目部署到生产环境中时不容易出错</p><p>后台此时收到的请求路径为/book/allbook首先SpringMVC在项目启动时会去扫描我们指定的要扫描的路径也就是com.kuang.controller这个路径下的所有类，我们看下BookController这个类的代码</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/8.png" alt=""></p><p>SpringMVC会扫描这个类中的所有注解，当看到@Controller是会生成该controller的Bean，扫描到@RequestMappting注解的时候会将@RequestMappting中的URI和下面的方法形成映射。所以我们请求的URI是“/book/allBool”<br>SpringMVC就会将数据交由BookController类的list方法来处理</p><p>我们仔细观察list方法，里面调用了bookService参数的queryAllBook方法，这里使用到了两个注解@Autowired，@Qualifier，简单介绍下两个注解的作用</p><p>@Autowrite</p><p>作用：自动按照类型注入,只要有唯一的类型匹配就能注入成功，当传入的类型不唯一时，则会报错。</p><p>@Qualiier</p><p>作用：在自动按照类型注入的基础上，在按照bean的id注入。它在给类成员注入数据时，不能独立使用。但是再给方法的形参注入数据的时候，可以独立使用。</p><p>由此可以看到bookService参数的类型是BookService类型，通过注解自动注入的Bean的id叫做BookServiceImpl</p><h2 id="SSM之Spring执行流程"><a href="#SSM之Spring执行流程" class="headerlink" title="SSM之Spring执行流程"></a>SSM之Spring执行流程</h2><p>这里我们就要从SpringMVC的部分过渡到Spring的部分了,所谓的过渡就是我们从SpringMVC的Controller层去调用Service层而这Service就是我们使用Spring进行IOC控制和AOP编程的地方。</p><p>首先我们需要先要去看spring-service.xml这个配置文件，</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/9.png" alt=""></p><p>这里我们看到了一个很重要的东西<br>id为BookServiceImpl的bean，我们可以看到这个bean的class路径是com.kuang.service.BookServiceImpl，</p><p>&lt;bean&gt;这个标签就牵扯到了Spring一大核心功能点 就是IOC(Inversion of<br>Control)控制反转，名字听起来特别唬人，其实特别容易理解，就是本来写一个项目需要我们自己手动去new一个实例出来，用了Spring以后我们至于要把我们需要生成实例的那个类的路径，以及我们在new<br>一个实例时需要传入的的参数，传入参数的方法可以是通过构造方法，也可以通过set方法，我们还可以给这个bean起一个名称来方便我们调用（如果不用id参数之名的话那么这个bean的名称默认为<br>类名开头字母小写，比如BookServiceImpl，如不特别指定，那么生成的bean的名称就是bookServiceImpl）。Spring就会在启动时将这些我们指定好的类生成的实例放入IOC容器中供我们使用，通俗点说就是本来由我们手动生成实例的过程交由Spring来做了，这就是所谓的控制反转。</p><p>接下来我们去看BookServiceImpl这个类的详细信息</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/10.png" alt=""></p><p>首先看到该类是实现了BookService这个接口，ok我们先去看BookService这个接口</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/11.png" alt=""></p><p>可以看到接口中定义了四种方法，为了方便理解，这些方法的名字是对应着日常项目中最长用的操作数据库的四个方法即，增删改查。</p><p>好了，看完了接口我们来看接口的实现类也就是BookServiceImpl。</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/12.png" alt=""></p><p>由于实现了BookService这个接口，自然也就需要实现该接口下的所有方法，我们找到queryAllBook方法，发现queryAllBook调用了bookMapper参数的queryAllBook方法，而bookMapper是BookMapper类型的参数。</p><p>我们回过头来看spring-service.xml中的这一项配置，之前说了这一配置是将BookServiceImpl这个类生成一个bean并放入Spring<br>的IOC容器中，&lt;property&gt;标签的意思是通过该类提供的set方法在bean生成时向指定的参数注入value，name属性就是指定的参数的名称，可以看到我们BookServiceImpl中确实有一个私有参数名叫bookMapper</p><p>并且提供了该属性的set方法，<br>ref属性是指要注入的value是其他的Bean类型，如果传入的是一些基本类型或者String类型就不需要用ref<br>将ref改成value就可以</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/13.png" alt=""></p><p>这里我们可以看到我们通过ref属性向BookServiceImpl这个类中的bookMapper参数注入了一个value，这个value是一个其他的bean类型，这个bean的id叫做bookMapper。此时由于我们Service层的BookServiceImpl的queryAllBook方法的实现方式其实就是调用了id为bookMapper的bean的queryAllBook方法。所以这个id为bookMapper的bean就是程序执行的下一步。</p><h2 id="SSM之Mybatis执行流程"><a href="#SSM之Mybatis执行流程" class="headerlink" title="SSM之Mybatis执行流程"></a>SSM之Mybatis执行流程</h2><p>接下来就是是我们的web三层架构的数据访问层也就是我们Mybaits负责的部分，通常这一部分的包名会叫做xxxdao，也就是开发中常说的dao层，该包下面的类和接口通常都叫做xxxDao或者xxxMapper，当然不遵守这个规范也可以但是不推荐。此时我们的请求要从Spring负责的业务层过渡到Mybatis负责的数据层了，但是Mybaits和Spring的关系不像SpringMVC和Spring的关系一样可以无缝衔接，所以我们需要通过配置文件将Mybatis和Spring关联起来，这里我们看一下pom.xml</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/14.png" alt=""></p><p>可以看到我们导入的包除了Mybatis本身，还倒入了一个mybatis-spring的包，目的就是为了将Mybatis和Spring做结合，spring-dao.xml也就是用来整合Spring和Mybatis的配置文件。</p><p>刚才我们看到Spring启动加载bean时会注入一个id为bookMapper的bean但是我们并未在之前的任何配置文件包括注解中看到有这个bean的相关信息，所以我们接下来要看spring-dao.xml中有没有和这个bean有关的信息</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/15.png" alt=""></p><p>每项配置的作用基本都用注释的方式标明了</p><p>&lt;context:property-placeholder location=”classpath:database.properties”/&gt;</p><p>这里关联了一个properties文件</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/16.png" alt=""></p><p>里面是连接数据库和配置连接池时需要的信息，没什么好说的。</p><p>我们着重看这个配置</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/17.png" alt=""></p><p>这个配置通过生成MapperScannerConfigurer的bean来实现自动扫描com.kuang.dao下面的接口包，然后动态注入到Spring<br>IOC容器中，同样动态注入的bean的id默认为类名（开头字母小写），我们看下到目录下有哪些文件。</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/18.png" alt=""></p><p>我们看到有一个叫BookMapper的接口文件，这样就明白了之前生成BookServiceImpl这个bean是通过&lt;property&gt;也就是通过BookServiceImpl类中的</p><p>public void setBookMapper(BookMapper bookMapper) {</p><p>this.bookMapper = bookMapper;</p><p>}</p><p>方法注入的这个bookMapper是哪里来的了，是由我们配置了MapperScannerConfigurer这个bean后这个bean帮我们扫描dao包下的借口文件并生成bean然后再帮我们注入到Spring的IOC容器中，所以我们才可以在BookServiceImpl这个bean中通过&lt;property&gt;标签注入bookmapper这个bean</p><p>然后我们来看这项配置</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/19.png" alt=""></p><p>这里是生成一个id为sqlSessionFactory的bean，这里就要引出Mybatis中的两个关键对象即sqlSessionFactory和sqlSession。</p><p>简单介绍下这两个对象</p><p>SqlSessionFactory</p><p>SqlSessionFactory是MyBatis的关键对象，它是单个数据库映射关系经过编译后的内存镜像。SqlSessionFactory对象的实例可以通过SqlSessionBuilder对象获得，而SqlSessionBuilder则可以从XML配置文件或一个预先定制的Configuration的实例构建出SqlSessionFactory的实例。SqlSessionFactory是创建SqlSession的工厂。</p><p>SqlSession</p><p>SqlSession是执行持久化操作的对象，类似于JDBC中的Connection。它是应用程序与持久存储层之间执行交互操作的一个单线程对象。SqlSession对象完全包括以数据库为背景的所有执行SQL操作的方法，它的底层封装了JDBC连接，可以用SqlSession实例来直接执行已映射的SQL语句。</p><p>SqlSessionFactory和SqlSession的实现过程：</p><p>mybatis框架主要是围绕着SqlSessionFactory进行的，创建过程大概如下：</p><p>(1)、定义一个Configuration对象，其中包含数据源、事务、mapper文件资源以及影响数据库行为属性设置settings</p><p>(2)、通过配置对象，则可以创建一个SqlSessionFactoryBuilder对象</p><p>(3)、通过 SqlSessionFactoryBuilder 获得SqlSessionFactory 的实例。</p><p>(4)、SqlSessionFactory<br>的实例可以获得操作数据的SqlSession实例，通过这个实例对数据库进行</p><p>如果是spring和mybaits整合之后的配置文件,一般以这种方式实现,SqlSessionFactory的创建:</p><p>&lt;bean id=”sqlSessionFactory” class=”org.mybatis.spring.SqlSessionFactoryBean”&gt;</p><p>&lt;property name=”dataSource” ref=”dataSource”&gt;&lt;/property&gt;</p><p>&lt;property name=”mapperLocations”<br>value=”classpath:com/cn/mapper/*.xml”&gt;&lt;/property&gt;</p><p>&lt;/bean&gt;</p><p>SqlSessionFactoryBean是一个工厂Bean，根据配置来创建SqlSessionFactory</p><p>如果是单独的使用手动创建SqlSessionFactory和SqlSession话流程如下</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/20.png" alt=""></p><p>看完了SqlSessionFactory和SqlSession的基础知识我们同时注意到下面这个&lt;property&gt;标签的value属性，“classpath:mybatis-config.xml”</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/21.png" alt=""></p><p>这里又引入了一个xml配置文件，还记得我上面刚说过spring-dao.xml是用来整合Spring和Mybatis的么？这个mybatis-config.xml就是我们Mybatis的配置文件。</p><p>好了spring-dao.xml这个用来整合Spring和Mybatis的配置文件我们已经了解了，程序按着刚才的请求接着向下走。</p><p>我们刚在走到了BookServiceImpl类的queryAllBook方法，然后该方法又是调用了bookMapper的queryAllBook方法。现在我们清楚了bookMapper的类型是BookMapper</p><p>又从sping-dao.xml的配置文件中看到了该文件的位置位于com.kuang.dao路径下，我们现在就打开BookMapper.java文件看一看</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/22.png" alt=""></p><p>我们注意到这只是个接口，我们都知道接口是不能实例化的接口只是提供一个规范，这是我们就有疑问了，那我们调用的bookMapper的queryAllBook是怎么执行的？</p><p>我们在仔细看下dao目录下的文件，</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/23.png" alt=""></p><p>发现还有一个名字和BookMapper.java名字一样的xml文件，我们打开看一下内容。</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/24.png" alt=""></p><p>看到这个文件，虽然我们对mybatis的了解不多，但是我们应该大概明白了，为什么我们BookMapper明明只是接口，我们却可以实例化生成BookMapper的bean并且可以调用他的方法了。</p><p>但是只有BookMapper.java和BookMapper.xml显然不能就是Mybatis的全部了，两个文件之间此时除了名字相同以外还没有什么直接联系，所以我们还需要关联起来，我们来看看mybatis-config.xml这个Mybatis的配置文件</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/25.png" alt=""></p><p>我们看到了&lt;mappers&gt;这个标签的resource属性的value就是我们BookMapper.xml的路径MyBatis<br>是基于 sql 映射配置的框架，sql 语句都写在 Mapper 配置文件中，当构建 SqlSession<br>类之后，就需要去读取 Mapper 配置文件中的 sql 配置。而&lt;mappers&gt;<br>标签就是用来配置需要加载的 sql 映射配置文件路径的。</p><p>也就是说最终由我们的Spring帮我生成BookMapper的代理对象然后由Mybaits通过&lt;mappers&gt;标签将BookMapper代理对象中的方法和BookMapper.xml中的配置进行一一的映射，并最终执行其中的Sql语句。</p><p>我们看到我们此次请求最终调用的BookMapper的queryAllBook方法，这时我们就需要去BookMapper.xml去寻找与之对应的Sql语句了</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/26.png" alt=""></p><p>很容易就找到了</p><p>我们看到最后执行的sql语句是</p><p>SELECT * from ssmbuild.books</p><p>至此我们的请求已经完成从一开始的由DispatcherServlet这个前端控制器派发给SpringMVC并最终通过Mybatis<br>执行我们需要对数据库进行的操作。</p><p>生产环境的业务代码，会比这个Demo复杂，但是整体的执行流程和思路并不会有什么太大的变化，所以审计思路也是如此。</p><p>SSM框架有三种配置方式，即全局采用xml配置文件的形式，全局采取注解的配置方式，或者注解和xml配置文件配合使用的方式，区别只是在于写法不一样，执行流程不会因此发生太多改变。</p><h2 id="审计的重点filter过滤器"><a href="#审计的重点filter过滤器" class="headerlink" title="审计的重点filter过滤器"></a>审计的重点filter过滤器</h2><p>此时在将web.xml时还有一个标签说放在后面讲，就是web.xml的&lt;filter&gt;标签</p><p>SpringMVC时构建于Servlet之上的，所以Servlet中的过滤器自然也是可以使用，只不过不能配置在spring-mvc.xml中，而是要直接配置在web.xml中，因为是属于Servlet的技术嘛。</p><p>我们重回web.xml</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/27.png" alt=""></p><p>为了方便之前的讲解，我将这两个filter注释掉了。也就是说这两个filter并没有生效。我们以下面的filter-name为XSSEscape的filter来进行讲解。</p><p>首先我们此时程序是没有XSS防护的，所以存在存储型XSS漏洞，我们来尝试存储型XSS攻击</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/28.png" alt=""></p><p>我们点击新增功能</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/29.png" alt=""></p><p>看一下提交路径</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/30.png" alt=""></p><p>去后台找与之对应的方法</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/31.png" alt=""></p><p>找到后在这里下断点看传入参数的详细信息</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/32.png" alt=""></p><p>看到没有任何过滤XSS语句就这么直接传了进来</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/33.png" alt=""></p><p>如果我们此时想要防御这个XSS攻击就可以在web.xml中配置上我们的&lt;filter&gt;</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/34.png" alt=""></p><p>这里声明了了我在com.kuang.filter的包路径下又一个类叫XssFilter是一个过滤器</p><p>下面的&lt;dispatcher&gt;属性中的REQUEST的意思是</p><p>只要发起的操作是一次HTTP请求，比如请求某个URL、发起了一个GET请求、表单提交方式为POST的POST请求、表单提交方式为GET的GET请求。一次重定向则前后相当于发起了两次请求，这些情况下有几次请求就会走几次指定过滤器。</p><p>&lt;dispatcher&gt;属性2.4版本的servlet中添加的新的属性标签，总共有四个值REQUEST,FORWARD,INCLUDE和ERROR，以下把这四个值简单说明一下</p><p>1、REQUEST</p><p>只要发起的操作是一次HTTP请求，比如请求某个URL、发起了一个GET请求、表单提交方式为POST的POST请求、表单提交方式为GET的GET请求。一次重定向则前后相当于发起了两次请求，这些情况下有几次请求就会走几次指定过滤器。</p><p>2、FOWARD</p><p>只有当当前页面是通过请求转发转发过来的情形时，才会走指定的过滤器</p><p>3、INCLUDE</p><p>只要是通过&lt;jsp:include page=”xxx.jsp”<br>/&gt;，嵌入进来的页面，每嵌入的一个页面，都会走一次指定的过滤器。</p><p>4、ERROR</p><p>假如web.xml里面配置了&lt;error-page&gt;&lt;/error-page&gt;：</p><p>例如</p><p>&lt;error-page&gt;</p><p>&lt;error-code&gt;400&lt;/error-code&gt;</p><p>&lt;location&gt;/filter/error.jsp&lt;/location&gt;</p><p>&lt;/error-page&gt;</p><p>意思是HTTP请求响应的状态码只要是400、404、500三种状态码之一，容器就会将请求转发到error.jsp下，这就触发了一次error，走进了配置的DispatchFilter。需要注意的是注意一点的是，虽然把请求转发到error.jsp是一次forward的过程，但是配置成&lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;并不会走DispatchFilter这个过滤器。</p><p>这四种dispatcher方式可以单独使用，也可以组合使用，配置多个&lt;dispatcher&gt;&lt;/dispatcher&gt;<br>即可。</p><p>在审计的时候的过滤器&lt;dispatcher&gt;属性中使用的值也是我们关注的一个点，</p><p>&lt;url-pattern&gt;属性是指明我们要过滤访问哪些资源的请求，“/*”的意思就是拦截所有对后台的请求,<br>包括对一个简单的对jsp页面的GET请求，同时我们可以具体的指定拦截对某一资源的请求，同时也可以设置对某些资源的请求不过滤单独进行放过，</p><p>举例说明</p><p>&lt;filter&gt;</p><p>&lt;filter-name&gt;XSSEscape&lt;/filter-name&gt;</p><p>&lt;filter-class&gt;com.springtest.filter.XssFilter&lt;/filter-class&gt;</p><p>&lt;/filter&gt;</p><p>&lt;filter-mapping&gt;</p><p>&lt;filter-name&gt;XSSEscape&lt;/filter-name&gt;</p><p>&lt;url-pattern&gt;/com/app/UserControl&lt;/url-pattern&gt;</p><p>&lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;</p><p>&lt;/filter-mapping&gt;</p><p>既然等指定单独过滤特定资源，自然也就可以指定对特定资源的放行。</p><p>如果设置全局的资源请求过滤的话肯定是不合理的，生产环境中又很多静态资源是不需要进行过滤的，所以我们可以指定将这些资源进行放行，</p><p>例如</p><p>&lt;filter&gt;</p><p>&lt;filter-name&gt; XSSEscape &lt;/filter-name&gt;</p><p>&lt;filter-class&gt; com.springtest.filter.XssFilter &lt;/filter-class&gt;</p><p>&lt;init-param&gt;</p><p>&lt;!– 配置不需要被登录过滤器拦截的链接，只支持配后缀、前缀<br>及全路径，多个配置用逗号分隔 –&gt;</p><p>&lt;param-name&gt;excludedPaths&lt;/param-name&gt;</p><p>&lt;param-value&gt;/pages/*,*.html,*.js,*.ico&lt;/param-value&gt;</p><p>&lt;/init-param&gt;</p><p>&lt;/filter&gt;</p><p>&lt;filter-mapping&gt;</p><p>&lt;filter-name&gt; XSSEscape &lt;/filter-name&gt;</p><p>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</p><p>&lt;/filter-mapping&gt;</p><p>这样我们的serlvet在路径选择时当有对 html js<br>和ico资源发起的请求就不回在将改请求转发至XssFilter类。</p><p>我们在审计代码时<br>这里也是需要注意的一个点，因为有可能开发人员的错误配置导致本应该经过过滤器的请求，错误的给直接放行了，这样即使项目中有过滤器，也是不会生效的。</p><p>明白了&lt;filter&gt;标签的作用我们就去看XssFilter这个类的内容</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/35.png" alt=""></p><p>可以看到filter包下有两个java类，我们先看XssFilter这个类</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/36.png" alt=""></p><p>可以看到我们的XssFilter这个类实现了一个叫Filter的接口</p><p>我们去看一下Filter接口的源码</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/37.png" alt=""></p><p>可以看到Filter所属的包是javax.servlet</p><p>Filter是Servlet的三大组件之一</p><p>javax.servlet.Filter 是一个接口，过滤请求，实现请求的拦截或者放行，并且添加新的功能</p><p>众所周知接口其实就是一个标准，所以我们想要编写自己的过滤器自然也要遵守这个标准即实现Filter这个接口。</p><p>Filter接口中有三个方法，这里简单介绍一下</p><p>init方法：</p><p>在创建完过滤器对象之后被调用。只执行一次</p><p>doFilter方法：</p><p>执行过滤任务方法。执行多次。</p><p>destroy方法：</p><p>Web服务器停止或者Web应用重新加载，销毁过滤器对象。</p><p>当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter<br>程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service<br>方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service<br>方法</p><p>不难看出需要我们重点关注的方法是doFilter方法</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/38.png" alt=""></p><p>这里的request的参数和response参数可以理解成封装了请求数据和相应数据的对象，我们需要过滤的数据就是存放在这两个对象中，</p><p>最后一个参数FilterChain，通过名字我们猜这个参数是一个过滤链，查看一下FilterChain的源码</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/39.png" alt=""></p><p>看到FilterChain是一个接口，而且这个接口只有一个方法，那就是doFilter方法，FilterChain参数存在的意义就在于，在一个<br>Web 应用程序中可以注册多个 Filter 程序，每个 Filter 程序都可以对一个或一组<br>Servlet 程序进行拦截。如果有多个 Filter 程序都可以对某个 Servlet<br>程序的访问过程进行拦截，当针对该 Servlet 的访问请求到达时，Web 容器将把这多个<br>Filter 程序组合成一个 Filter 链（也叫过滤器链），</p><p>Filter 链中的各个 Filter 的拦截顺序与它们在 web.xml 文件中的映射顺序一致，上一个<br>Filter.doFilter 方法中调用 FilterChain.doFilter 方法将激活下一个<br>Filter的doFilter 方法，最后一个 Filter.doFilter 方法中调用的<br>FilterChain.doFilter 方法将激活目标 Servlet的service 方法</p><p>只要 Filter 链中任意一个 Filter 没有调用 FilterChain.doFilter 方法，则目标<br>Servlet 的 service 方法都不会被执行</p><p>介绍完FilterChain接下来大家应该发现，虽然名字叫过滤器</p><p>但是调用chain.dofilter方法似乎并没有执行任何类似过滤的工作，没有看到任何类似黑名单或者白名单的过滤规则</p><p>在调用chain.dofilter方法时我们传递了两个参数进去</p><p>new XSSRequestWrapper((HttpServletRequest) request)和response</p><p>这就是说我们传递了一个XSSRequestWrapper对象和ServletRespons对象，我们关心的当然是这个XSSRequestWrapper</p><p>在传递参数的过程中我们通过调用XSSRequestWrapper的构造器，传递了HttpServletRequest对象，这里简单从继承关系让大家看一下HttpServletRequest和ServletRequest的关系</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/40.png" alt=""></p><p>既然这里生成了一个XSSRequestWrapper对象并传入的参数那我们自然要跟进一探究竟</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/41.png" alt=""></p><p>正好filter下面有一个叫XSSRequestWrapper的类，我们看一下代码</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/42.png" alt=""></p><p>看到这里大家应该恍然大悟，原来过滤的行为是在这里进行了，而XssFilter的存在只是在链式执行过滤器并最终将值传给Servlet时调用XSSRequestWrapper来进行过滤并获取过滤结果而已。</p><p>这里对过滤规则就不过多赘述，网上有很多好的过滤规则，这里就不多提了。</p><p>这里肯定有很多人并明白问什么不将过滤的逻辑代码写在XssFilter中而是又新写了一个类，不是多此一举么？</p><p>这么做当然不是多此一举，首先解耦这个理由就已经足够充分了，其次我们看到XSSRequestWrapper继承了一个类<br>HttpServletRequestWrapper</p><p>这里我们看一下HttpServletRequestWrapper类的继承关系</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/43.png" alt=""></p><p>我们可以看到HttpServletRequestWrapper是实现了HttpServletRequest接口的，我们这里提一下过滤这个概念，我们的想法是尽可能的把请求中的有危害的数据或者特殊符号过滤掉，然后将过滤后的数据转发向后面的业务代码并继续执行，而不是说发现请求数据中有特殊字符就直接停止执行，抛出异常，返回给用户一个400页面，所以既然要继续执行，那我们就要去修改或者转义HttpServletRequest对象中的恶意数据或者特殊字符。然而HttpServletRequest对象中的数据是不允许被修改的，也就是说HttpServletRequest对象没有提供给我们直接修改请求数据的方法。</p><p>此时矛盾就来了，我们想要修改但是HttpServletRequest对象又不给提供，所以HttpServletRequestWrapper这个类就出现了，这里用到了常见的23中设计模式之一的装饰者模式，限于篇幅原因不可能对装饰者模式在进行讲解了，感兴趣的同学可以自己去研究。也就是说HttpServletRequestWrapper这个类的出现就是为了给我们提供修改request请求数据的方法的，到这里大家应该就明白了为什么需要单写一个类来进行过滤的行为，不是我们想着么写，而是框架就这么设计的，为的就是解耦。</p><p>此时当HttpServletRequestWrapper将请求中的数据过滤完，并修改完成后返回然后作为chain.doFilter方法的形参进行传递。</p><p>结合之前说的，最后一个 Filter.doFilter 方法中调用的 FilterChain.doFilter<br>方法将激活目标 Servlet的service 方法</p><p>由于我们没有配置第二个Filter所以XssFilter中的chain.doFilter将会激活我们Servlet的service方法即DispatcherServlet的service方法，然后数据将传入我们的SpringMVC的Controller层交由我们的BookController来处理。</p><p>我们这次使用filter来演示一下效果</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/44.png" alt=""></p><p>老地方下断</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/45.png" alt=""></p><p>然后再次执行到这里时XSS语句中的特殊字符已经被Filter转义。</p><p><img src="/2020/05/31/java-kuang-jia-ji-ssm-dai-ma-shen-ji-si-lu/46.png" alt=""></p><p>自然也就不会存在Xss的问题了。</p><h1 id="SSM框架审计思路总结"><a href="#SSM框架审计思路总结" class="headerlink" title="SSM框架审计思路总结"></a>SSM框架审计思路总结</h1><h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><p>最后总结一下SSM框架的审计思路，审计思路其实就是我们代码的执行思路</p><p>和审计非SSM框架代码的主要区别就是在于SSM框架的各种XML配置，和注解配置，需要我们根据XML中的配置和注解来查看代码的执行路径，SSM框架中常见的注解和注解中的属性，以及常见的标签和标签的各个属性。</p><p>审计漏洞的方式同正常的java代码审计没有区别，网上有很多非常优秀的java代码审计文章，关于每个漏洞的审计方式写的都非常全面，我们需要的就只是将其移植到SSM框架的审计中来，我们明白SSM的执行流程了，自然就明白了该怎么在SSM框架中跟踪参数，例如刚刚讲的XSS漏洞，我们根据XML中的配置和注解中的配置一路跟到了Mybatis的mapper.xml这个映射文件，找到了最中执行的</p><p>insert into ssmbuild.books(bookName,bookCounts,detail)</p><p>values (#{bookName}, #{bookCounts}, #{detail})</p><p>这个sql语句，发现我们传入的books参数直到sql语句执行的前一刻都没有经过任何的过滤处理，所以此处插入数据库的参数自然是不可信的脏数据。</p><p>当我们再次查询这条数据并返回到前端时就非常可能造成存储型XSS攻击</p><p>我们在审计这类漏洞时，最简单的方法就是先去web.xml中去查看有没有配置相关的过滤器，如果有哪我们就去看看过滤器的规则是否严格，如果没有那就很有可能存在漏洞。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>最后还要提一个必要重要的Mybaits知识点就是Mybatis的预编译，关于java的预编译简单介绍一下</p><p>非预编译的情况下我们每次执行sql都需要将slq和参数拼接在一起然后传给数据库编译执行，这样采用拼接的方式非常容易产生SQL注入漏洞，当然可以使用filter对参数进行过滤来避免产生SQL注入，</p><p>而在预编译的情况下，程序会提前将我们的sql语句编译好，程序执行的时候只需要将传递进来的参数交由数据库进行操作就可以了，此时不论传来的参数是什么，都不会被当成时SQL语句的一部分，因为真正的SQL语句已经提前编译好了，所以即使不过滤也不会产生SQL注入这类漏洞，</p><p>以下面这个mapper.xml中的SQL语句举例</p><p>insert into ssmbuild.books(bookName,bookCounts,detail)</p><p>values (#{bookName}, #{bookCounts}, #{detail})</p><p>#{bookName}这种形式的就是采用了预编译的形式传参，而以下这种形式</p><p>insert into ssmbuild.books(bookName,bookCounts,detail)</p><p>values (‘${bookName}’,’${bookCounts}’, ‘${detail}’)</p><p>‘${bookName}’这种写法就是没有使用预编译的形式进行传参数，此时如果不对传入的参数进行过滤和校验的话就会产生SQL注入漏洞</p><p>‘${xxxx}’和#{xxxx}其实就是jdbc的Statement和PreparedStatement对象。</p><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><p>整篇文章对SSM框架的整个执行流程和审计流程进行了简单的讲解，后续想要增强SSM框架的审计水平，推荐大家自己上手一些简单SSM框架搭建的项目，实战永远是最快的学习方式，大家在审计SSM框架可能遇到的最大的困难就是有很多新的之前没有碰到过的注解，和XML中一些SSM独有的标签，这些注解和标签数量很多，没有办法在一篇文章中讲完，大家碰到不懂的注解和标签都可以通过官方提供的文档和搜索引擎来寻找答案。</p><p>最后感谢大家的耐心观看。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Solr Velocity模板注入漏洞深度分析</title>
      <link href="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/"/>
      <url>/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Solr-Velocity模板注入漏洞深度分析"><a href="#Apache-Solr-Velocity模板注入漏洞深度分析" class="headerlink" title="Apache Solr Velocity模板注入漏洞深度分析"></a>Apache Solr Velocity模板注入漏洞深度分析</h1><p>漏洞分析环境搭建</p><p>需要工具</p><p>IDEA</p><p>Apache Ant</p><p>Apache Solr8.2.0源码</p><p>Apache Solr8.2.0服务端</p><p>Chrome</p><p>Burp</p><h2 id="1-Apache-solr简介和漏洞复现"><a href="#1-Apache-solr简介和漏洞复现" class="headerlink" title="1  Apache solr简介和漏洞复现"></a>1  Apache solr简介和漏洞复现</h2><p>首先先简单介绍一下Apache Solr</p><p>Apache Solr是一个强大的搜索服务器，它支持像API一样的REST。 Solr由Lucene提供支持，可以实现强大的匹配功能，例如短语，通配符，连接，分组和更多的各种数据类型。 它是高度优化的高流量使用Apache Zookeeper。</p><p>介绍完Apache Solr之后我们就来复现一下这次的 Apache Solr Velocity服务端模板注入漏洞</p><p>我们首先从Apache Solr官网上下载Apache Solr 8.2.0的服务端</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/8.2.0/solr-8.2.0.tgz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/8.2.0/solr-8.2.0.tgz</a></p><p>下载完成之后解压</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/1.png" alt=""></p><p>我们通过命令行终端进入bin目录然后输入“./solr start”命令</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/2.png" alt="2"></p><p>Apache Solr就会默认在本地的8983端口启动服务,</p><p>我们访问一下地址 <a href="http://127.0.0.1:8983/solr/#/" target="_blank" rel="noopener">http://127.0.0.1:8983/solr/#/</a></p><p>查看左侧的Core Selector的集合名称</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/3.png" alt="3"></p><p>使用burp Repeater模块像服务端发包修改指定集合的配置</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/4.png" alt="4"></p><p>修改配置成功</p><p>然后发送事先构造好的playload</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/5.png" alt="5"></p><p>漏洞复现成功</p><h2 id="2-模板引擎简介"><a href="#2-模板引擎简介" class="headerlink" title="2  模板引擎简介"></a>2  模板引擎简介</h2><h3 id="2-1-JSP简介"><a href="#2-1-JSP简介" class="headerlink" title="2.1 JSP简介"></a>2.1 JSP简介</h3><p>漏洞复现完成，但是分析漏洞我们还需要一些前置知识，比如什么是模板注入漏洞，以及Velocity究竟是什么，</p><p>我们都知道，现在web开发讲究的是一个前后端分离的方式，MVC模式就是其经典的代表。如果抛弃前后端分离，仅仅开发一个能用的网站，只需要一个JSP其实就够了，但是这样很明显会导致开发时逻辑及其混乱，以及后期维护起来成本极高的问题，这样的开发完全违背的我们java这么一个面向对象语言优雅的编程思维。</p><p>我们在开发一个程序时希望的就是一个模块尽量是独立完成某一个功能而不依赖别的模块的，也就是我们的高内聚，低耦合的思想。</p><p>这种思想用到我们的web开发的架构时，就有了我们的MVC模式，即 Mode，</p><p>View，Controller。和我们的web三层架构，即表示层，业务逻辑层，和数据接口层。尽量保证每一层都是独立可用的,在这里特别提示一下，web三层架构是java独有的概念，而MVC架构则是通用的。</p><p>在这种情况下，每一层都出现了其相对应开源组件。</p><p>首先不得不提的两个使用量最高的MVC框架，Struts2，和SpringMVC。</p><p>表现层有我们的JSP和Thymeleaf，Velocity，Freemarker等模板引擎</p><p>业务层由我们最火热的开源组件Spring</p><p>数据层就有我们最常见的Mybaits和Hibernate两个Dao层框架</p><p>而这次我们要重点注意的就是位于我们的表现层，也就是我们的Velocity模板引擎。 </p><p>对于web不太熟悉的同学可能暂时还不能理解什么是模板引擎，或者说模板引擎是做什么用的。但是相信大家都听过JSP， </p><p>JSP的全称是Java Server Package，与普通的静态html页面相比，区别在于我们可以在JSP页面上书写java代码，以实现和用户进行交互，从而达到动态的这么一个效果。</p><p>JSP一开始出现的时候是同时兼具前端和后端的作用，也就是说如果只是开发一个勉强能用的java动态网站，jsp其实就足够了。</p><p>在JSP出现之前，实现动态页面的效果用的是Servlet的技术，Servlet可以很好的实现接受用户传来的参数并进行处理。但是把数据返回到前端并输出html页面时确异常的麻烦和痛苦。同常需要一行一行的输出html代码，像下面这样</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/6.png" alt="6"></p><p>后来JSP出现了，如果说Servlet是java代码中写HTML的话，那Jsp就是HTML中穿插写java代码了，jsp相比于Servlet来说并不是一个新的技术，jsp是Servlet的一个扩展，其本质仍是Servlet,</p><p>我们看一个最简单的JSP页面</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/7.png" alt="7"></p><p>看起来就是一个普通的HTML页面，为什么我会说jsp的本质是Servlet呢？</p><p>当我们将项目编译打成war包部署在Tomcat下时，会放在Tomcat的WebApp目录下，里面有我们的项目后台的java文件编译成的.class文件。同时也有我们的jsp文件。</p><p>但是我们的jsp文件是不能直接被解析的，Jsp不像HTML拿来就能直接返返回给客户，因为jsp文件中是包含有java代码的，浏览器又不能解析我们jsp页面上的java代码，所以将jsp编译成浏览器能解析的html页面的工作就交由了我们的Tomcat来做 </p><p>当我们启动Tomcat时第一次访问我们的这个jsp页面，往往速度都会稍微慢一些，往后在访问时速度就会很快。这是因为，第一访问时，Tomcat会在他的根目录的work/Catalina/localhos目录下生成我们对应项目名称的一个文件夹。</p><p>并生成一个名称为org.apache.jsp的一个package，我们去观察一下</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/8.png" alt="8"></p><p>我们可以看到一个java文件和一个.class文件。还记得我刚刚才说过jsp的本质其实就是Servlet么？我们点开这个java文件来一探究竟。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/9.png" alt="9"></p><p>我们从中观察到这这么几个重点</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/10.png" alt="10"></p><p>首先这是一个java类，它继承了HttpJspBase类同时实现了两个接口</p><p>第二个重点在这里</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/11.png" alt="11"></p><p>这是一个静态代码块，静态代码块在类进行加载时就会执行，先于构造代码块和构造方法，是一个java类中最先被执行的代码。</p><p>我们根据其代码内容不难看出这静态代码块的作用是用来import Java类的。</p><p>接下来是一个名叫_jspService的函数，是不是特别像servlet的doGET和doPost方法？</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/12.png" alt="12"></p><p>最后我们在看这里</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/13.png" alt="13"></p><p>我们发现我们之前看到的jsp文件中的html内容，在这里被替换成了通过</p><p>JspWriter对象一句一句的写出的。</p><p>此时是不是理解了我之前说的，Jsp的本质就是servlet。表面上上我们是在一堆HTML标签中插入了一个又一个的java代码，本质上Tmocat在接收到客户端对我们这个jsp的请求后，会将我们的整个jsp文件编译成java文件在编译成.class文件。将HTML一句一句通过JspWriter对象的write方法一行一行的输出。</p><h3 id="2-1-Velocity模板引擎简介"><a href="#2-1-Velocity模板引擎简介" class="headerlink" title="2.1 Velocity模板引擎简介"></a>2.1 Velocity模板引擎简介</h3><p>讲解了JSP的基础知识后不知道大家有没有发现一个问题就是，Jsp虽然说是模板引擎的一种，但是如果只做为一个为前端服务的模板引擎来说，它的功能过于强大了，导致它不光可以书写前端页面，因为JSP可以毫无阻碍地访问底层的 Servlet API 和 Java 编程语言，所以同时也可以无缝书写后端的逻辑代码，在展示数据的同时也可以对数据进行处理。</p><p>这样就导致前端和后端完全就纠缠在了一起。完全违背了我们MVC的设计思想，你能想象一个前端页面是用Servlet输出，而后端代码使用Jsp来写的网站该怎么去维护么？</p><p>面向对象的优雅思想在这一刻荡然无存。</p><p>面向对象的核心思想就是，低耦合，高内聚。每一个模块的功能尽可能单一，尽可能的降低和别的模块和功能之间的耦合度。</p><p>所以Thymeleaf，Velocity，Freemarker等优秀模板引擎就一个接一个的出现了。</p><p>Velocity为主我们来了解，这个在MVC设计模式中，为View层服务的优秀模板引擎。</p><p>刚才通过对Jsp的介绍，我们理解了，一个模板引擎他的主要功能就是负责将后端代码也就是servlet处理完成的数据，提取并按照之前写好的样式展示出来。</p><p>Velocity是一个基于java的模板引擎（template engine）。它允许任何人仅仅使用简单的模板语言（template language）来引用由java代码定义的对象。 </p><p>当Velocity应用于web开发时，<a href="http://baike.baidu.com/view/119481.htm" target="_blank" rel="noopener">界面设计</a>人员可以和java程序开发人员同步开发一个遵循MVC架构的web站点，也就是说，页面设计人员可以只关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提供了便利，同时也为我们在JSP和PHP之外又提供了一种可选的方案。</p><p>前面说了这么多，现在我们在这里简单演示下Velocity这个模板引擎，给大家一个更直观的概念。</p><p>首先导入以下的包</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/14.png" alt="14"></p><p>然后我们创建一个演示类</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/15.png" alt="15"></p><p>这里我们首先实例话了一个VelocityEngine，并设置加载加载classpath目录下的vm文件</p><p>然后初始化VelocityEngine，接着就是加载一个模板，这里模板的名字叫“Hellovelocity.vm” 接下来的操作就是我们向模板的上下文中添加我们要传递的参数和值了。</p><p>最后的t.merget就会开始循环遍历生成的Velocity AST语法书的各个节点，执行每个节点的渲染方法。</p><p>我们看一下我们加载的这个模板的具体实现</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/16.png" alt="16"></p><p>和最终的执行结果</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/17.png" alt="17"></p><p>我们看到这里可以将我们之前后端代码中传输的值直接取出也可以循环取出。</p><p>这样我们就可以提前将静态部分用HTML和JavaScript写好，然后需要动态交互的部分就可以使用Velocity语法来进行编写。</p><h2 id="3-漏洞和POC构造分析"><a href="#3-漏洞和POC构造分析" class="headerlink" title="3  漏洞和POC构造分析"></a>3  漏洞和POC构造分析</h2><h3 id="3-1-漏洞分析环境搭建"><a href="#3-1-漏洞分析环境搭建" class="headerlink" title="3.1 漏洞分析环境搭建"></a>3.1 漏洞分析环境搭建</h3><p>首先我们下载Apache Slor 8.2.0源码</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/8.2.0/solr-8.2.0-src.tgz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/8.2.0/solr-8.2.0-src.tgz</a></p><p>下载完成后</p><p>我们进入Solr源码根目录</p><p>执行命令</p><p>ant ivy-bootstrap</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/18.png" alt="18"></p><p>然后再执行ant idea命令将源码转化成idea可以导入的模式</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/19.png" alt="19"></p><p>然后我们打开idea，选择open</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/20.png" alt="20"></p><p>最后导入完成后的样子</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/21.png" alt="21"></p><p>为了可以调试源码，我们需要再做一些配置</p><p>点开左上角的Edit Configuration</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/22.png" alt="22"></p><p>然后新增Remote</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/23.png" alt="23"></p><p>并按照如下配置</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/24.png" alt="24"></p><p>配置完成后我们进入solr的服务端的bin目录，并执行如下命令</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/25.png" alt="25"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/26.png" alt="26"></p><p>然后我们带idea中点击debug按钮，当有如下显示时代表调试环境搭建成功，</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/27.png" alt="27"></p><p>接下来我们就可以在自己想下断点的地方下断点了。</p><h3 id="3-2-POC第一部分执行和构造分析"><a href="#3-2-POC第一部分执行和构造分析" class="headerlink" title="3.2 POC第一部分执行和构造分析"></a>3.2 POC第一部分执行和构造分析</h3><p>首先我们就来一步一步分析这个漏洞吧，审计一个web项目我们首先先看有没有web.xml这个文件</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/28.png" alt="28"></p><p>我们找到了web.xml这个文件，位置在solr/webapp/WEB-INF/目录下</p><p>我们打开看一下内容</p><p>首先这个web.xml文件一开始就是一个filter过滤器，这个过滤器类路径是</p><p>org.apache.solr.servlet.SolrDispatchFilter，拦截的范围是所有请求</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/29.png" alt="29"></p><p>所以我们首先就需要去这个SolrDispatchFilter这个类去观察</p><p>此时我们有两条分析接下来漏洞走向的方式，我们通过查阅网上的资料得知</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/30.png" alt="30"></p><p>我们去目录下查看一下</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/31.png" alt="31"></p><p>果然有这两个文件</p><p>然后我们看下两个文件的部分内容，先看下solrconfig.xml</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/32.png" alt="32"></p><p>可以看到velocity.params.resource.loader.enabled参数默认是flase，也就是说是默认是不开启的。</p><p>我们在看一看configoverlay.json文件</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/33.png" alt="33"></p><p>看到这里存储着我们上传上来的参数，这里我们将params.resource.loader.enabled制为true</p><p>我们可以通过观察该文件何时被修改来判断，是否该跟进代码中。</p><p>然后我们观察poc的时候不难发现请求的API为“/config”</p><p>我们通过查阅资料发现</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/34.png" alt="34"></p><p>Solr中有很多的RequestHandler，默认配置在solrconfig.xml中，同时也有很多没有配置在solrconfig.xml，称为隐式RequestHandler。而“/config”就是其中之一，我们可以看到SolrConfigHandler便是处理提交我们提交poc的API之一</p><p>但是为了，讲的更加清晰，我们还是从SolrDispatchFilter.doFilter方法来一步一步的跟踪。</p><p>首先SolrDispatchFilter.doFilter方法执行到第 423行的时候，</p><p>会调用HttpSolrCall.call方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/35.png" alt="35"></p><p>我们跟进这个方法</p><p>然后代码执行到execute()方法时configoverlay.json文件更新了 所以我们跟进这个函数</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/36.png" alt="36"></p><p>继续跟进</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/37.png" alt="37"></p><p>  按照上面的思路，执行到handler.handleRequest()继续跟进  </p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/38.png" alt="38"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/39.png" alt="39"></p><p>此时就进入到了一开始我们从资料中所看到的“/config”所对应的类SolrConfigHandler，</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/40.png" alt="40"></p><p>由于此时进入这个函数是为了调用它的handleRequestBody方法，所以我们接着向下执行</p><p>这里POST用来修改数据。GET用来查询数据，所以我们执行到</p><p>command.handlePOST()方法然后跟进</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/41.png" alt="41"></p><p>执行到handleCommands()方法 此时传入的opsCopy就是我们从前端传入的配置信息，而overlay时当前的配置信息</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/42.png" alt="42"></p><p>继续跟进，当执行到SolrResourceLoader.persistConfLocally()方法时</p><p>configoverlay.json，文件更新了，</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/43.png" alt="43"></p><p>此时我们看到，关键参数时overlay.toButeArray()</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/44.png" alt="44"></p><p>而overlay参数最近的一次赋值动作是在这行代码里进行的，我们先跟进updateNamedPlugin()方法看一看</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/45.png" alt="45"></p><p>updateNamedPlugin方法中将op 和overlay参数都传入了进去</p><p>当执行到这个if判断时，判断为真，返回overlay，所以关键在于</p><p>Verifyclass()这个函数。</p><p>这里op仍然为我们 post传入的配置参数 clz的值为“solr.VelocityResponseWriter”</p><p>继续跟进</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/46.png" alt="46"></p><p>跟进函数之后我们看到这样一行代码</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/47.png" alt="47"></p><p>根据执行逻辑首先执行getCore方法，返回一个SolrCore对象</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/48.png" alt="48"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/49.png" alt="49"></p><p>然后执行op.getDataMap()方法，返回一个Map对像</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/50.png" alt="50"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/51.png" alt="51"></p><p>然后new 一个PluginInfo对象，构造方法里的主要操作就是向一个 NameList类型的对象中存值，存入的是我们POST传入的配置参数。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/52.png" alt="52"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/53.png" alt="53"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/54.png" alt="54"></p><p>createInitInstance()方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/55.png" alt="55"></p><p>泛型变量o是根据我们传入的参数PulginInfo对象的className属性“solr.VelocityResponseWriter”然后通过createInstance()方法反射获得的VelocityResponseWriter对象</p><p>因为VelocityResponseWriter对象实现了NamedListInitializedPlugin接口</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/56.png" alt="56"></p><p>所以执行</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/57.png" alt="57"></p><p>跟进</p><p>然后我们进入了VelocityResponseWriter对象的init方法，在这里有这么几行代码</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/58.png" alt="58"></p><p>可以看到在这里我们将VelocityResponseWriter对像的两个重要属性</p><p>paramsResourceLoaderEnabled，</p><p>solrResourceLoaderEnabled</p><p>设置为了true，也就是允许我们上传自定义模板了</p><p>紧接着init方法执行结束后，就会将VelocityResponseWriter对象按原路返回到SolrConfigHandler并赋值给overly属性</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/59.png" alt="59"></p><p>紧接着执行到第504行代码时configoverlay.json文件更新了，我们跟进这个方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/60.png" alt="60"></p><p>在调用SolrResourceLoader.persistConfLocally()方法时，可以看到我们将</p><p>overly作为参数传递了进去</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/61.png" alt="61"></p><p>此时观察代码我们就明白了，真正将我们post传递的配置参数写入文件的操作是在这一步进行的。至此 poc的第一部分追踪完毕。</p><h3 id="3-3-POC第二部分执行和构造分析"><a href="#3-3-POC第二部分执行和构造分析" class="headerlink" title="3.3  POC第二部分执行和构造分析"></a>3.3  POC第二部分执行和构造分析</h3><p>接下来是poc执行的第二阶段</p><p>老规矩先从SolrDispatchFilter类看起</p><p>执行到HttpSolrCall.call步入</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/62.png" alt="62"></p><p>紧接着执行到HttpSolrCall.writeResponse方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/63.png" alt="63"></p><p>观察此刻传入的三个参数，solrRsp参数是一个 SolrQueryResponse对象，我们GET传入的playload存储在该对象的value属性中</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/64.png" alt="64"></p><p>这个responseWriter对象相当重要，这里我们看到了两个参数</p><p>paramsResourceLoaderEnabled和solrResourceLoaderEnabled</p><p>这是我们poc第一步中修改的两个配置属性，只有这两个属性为true我们才可以上传自定义模板成功</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/65.png" alt="65"></p><p>responseWriter参数指向的是一个VelocityResponseWriter对象，responseWriter最近一次被赋值是在，下面这行代码中</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/66.png" alt="66"></p><p>本着刨根问底，以及锻炼我们分析代码执行逻辑能力的目的，我们深入了解一下</p><p>我们跟踪进HttpSolrCall.getResponseWriter方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/67.png" alt="67"></p><p>可以看到，这里将我们GET穿入的key的值为wt的属性里面的值velocity取出并作为参数传给了core.getQueryResponseWriter方法，core参数指向的是一个SolrCore对象</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/68.png" alt="68"></p><p>跟入SolrCore.getQueryResponseWriter方法，</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/69.png" alt="69"></p><p>跟入responseWriters.get方法，</p><p>此时我们来到了一个PluginBag对象的get方法 </p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/70.png" alt="70"></p><p>在执行完T result = get(name)方法后 result的结果中是一个VelocityResponseWriter对象且</p><p>paramsResourceLoaderEnabled和solrResourceLoaderEnabled属性都已被置为true，就是说给这两个属性赋值的操作就在get(name)这个方法里。继续跟进</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/71.png" alt="71"></p><p>还是继续跟进result的无参get方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/72.png" alt="72"></p><p>到这里，就出现问题了</p><p>这里会判断一个名字叫lazyInst的属性是否为空，如果不为空，则返回这个属性。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/73.png" alt="73"></p><p>我们来看看此时这个lazyInst属性是什么，</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/74.png" alt="74"></p><p>可以看到就是我们最终返回的VelocityResponseWriter对象。</p><p>那么问题就来了，我们这执行过程中并没有看到lazyInst对象被赋值，那么lazyInst属性指向的VelocityResponseWriter对象是哪来的呢？</p><p>我们会退一步，观察这行代码</p><p>PluginHolder<t> result = registry.get(name);</t></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/75.png" alt="75"></p><p>registry是一个hashmap类型，有final标识符</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/76.png" alt="76"></p><p>观察此时registry里面的内容</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/77.png" alt="77"></p><p>又因为registry.get(name)传入的name参数的值为velocity</p><p>我们打开这里的velocity</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/78.png" alt="78"></p><p>赫然看到那个lazyInst就在里面，我们知道标示的final的属性就是常量了，在对像生成被赋值了一次以后就不会再更改了。我通过多次发送poc请求测试发现每次到这个断点时当前的对象ID都是相同的，所以每次执行调用的都是同一个对像。</p><p>我们重新发送poc的第一部分。Poc第一部分请求完成后再在此处下断点</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/79.png" alt="79"></p><p>此时lazyInst属性就为空了</p><p>我们继续执行</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/80.png" alt="80"></p><p>此时由于lazyInst为空了，所以不会直接返回，我们跟进createInst方法，</p><p>看到在createInst方法的最后lazyInst属性被赋值，我们向上寻找这个localInst变量</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/81.png" alt="81"></p><p>在下面这行代码中localInst第一次被赋值</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/82.png" alt="82"></p><p>此时localInst中的内容为</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/83.png" alt="83"></p><p>也就是说此时程序只是从solrconfig.xml中读取了默认的配置，还并没有读取</p><p>configoverlay.json中我们更新的配置。</p><p>所以这行就不跟进了。</p><p>当执行到initInstance(localInst, pluginInfo)这行代码时</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/84.png" alt="84"></p><p>我们清楚的看到参数被更新了，那我们就跟入这行代码</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/85.png" alt="85"></p><p>跟入((NamedListInitializedPlugin) inst).init(info.initArgs)</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/86.png" alt="86"></p><p>然后就又看到了我们执行poc第一部分时所碰到的代码了，至此获取</p><p>configoverlay.json中我们更新的配置信息的执行逻辑我们已经分析完毕</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/87.png" alt="87"></p><p>接下来继续原路返回到我们调用HttpSolrCall.getResponseWriter的位置</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/88.png" alt="88"></p><p>继续跟进writeResponse(solrRsp, responseWriter, reqMethod);</p><p>此时solrRsp中存放的是我们Get传入的poc，responseWriter中存放的是我们configoverlay.json文件中存放的更新配置。</p><p>跟入QueryResponseWriterUtil.writeQueryResponse方法。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/89.png" alt="89"></p><p>跟入responseWriter.write方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/90.png" alt="90"></p><p>我们执行createEngine()方法时生成了一个VelocityEngine对象</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/91.png" alt="91"></p><p>我们进入createEngine()方法后可以看到方法内的第一行代码就是new一个VelocityEngine对象</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/92.png" alt="92"></p><p>关键点在以下这几行代码，这里对</p><p>paramsResourceLoaderEnabled</p><p>solrResourceLoaderEnabled两个参数进行了判断，当</p><p>paramsResourceLoaderEnabled参数为true时执行</p><p>loaders.add(“params”);</p><p>engine.setProperty(“params.resource.loader.instance”, new SolrParamResourceLoader(request));</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/93.png" alt="93"></p><p>根据网上查到的资料我们可以看到params.resource.loader.instance这个属性的含义</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/94.png" alt="94"></p><p>也就是说当开启这个属性的时候，我们就可以通过Solr来上传我们自定义的模板了。</p><p>最后返回VelocityEngine对象</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/95.png" alt="95"></p><p>返回到responseWriter.write方法，继续执行到</p><p>Template template = getTemplate(engine, request);</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/96.png" alt="96"></p><p>这里我们生成了一个template</p><p>跟进去后我们看到</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/97.png" alt="97"></p><p>从我们Get传入的参数中获取V.template作为模板的名字</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/98.png" alt="98"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/99.png" alt="99"></p><p>同时将我们传入的Poc也就时Velocity模板语句解析成AST抽象语法树</p><p>这里就要对velocity的AST抽象语法树做一下简单的介绍了</p><p>在计算机科学中，抽象语法树（abstract syntax tree 或者缩写为 AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。树上的每个节点都表示源代码中的一种结构。</p><p>之所以说语法是「抽象」的，是因为这里的语法并不会表示出真实语法中出现的每个细节。</p><p>Velocity是通过JavaCC和JJTree生成抽象语法树的,</p><p>javaCC 是一个能生成语法和词法分析器的生成程序。语法和词法分析器是字符串处理软件的重要组件，<a href="http://www.google.com/url?sa=t&amp;ct=res&amp;cd=1&amp;url=https%3A%2F%2Fjavacc.dev.java.net%2F&amp;ei=9DVYRYiNNqOEpgKyrbivCQ&amp;usg=__mFYMOj71sh29a1K1V8lPTOwCBok=&amp;sig2=hEpGu_jpqYUmHxmOExyoMg" target="_blank" rel="noopener">javacc</a>是类似lex/yacc的parser生成器，可以把一段文本转换为抽象语法树（AST）。</p><p>JJTree是javaCC的预处理器，用于在JavaCC生成的源代码中的各个地方插入表示语义动作的分析树</p><p>用网上的一张图来介绍一下AST的一些节点</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/100.png" alt="100"></p><p>Velocity的语法相对简单，所以它的语法节点并不是很多，总共有50几个，它们可以划分为如下几种类型。</p><ol><li><p>块节点类型：主要用来表示一个代码块，它们本身并不表示某个具体的语法节点，也不会有什么渲染规则。这种类型的节点主要由ASTReference、ASTBlock和ASTExpression等组成。</p></li><li><p>扩展节点类型：这些节点可以被扩展，可以自己去实现，如我们上面提到的#foreach，它就是一个扩展类型的ASTDirective节点，我们同样可以自己再扩展一个ASTDirective类型的节点。</p></li><li><p>中间节点类型：位于树的中间，它的下面有子节点，它的渲染依赖于子节点才能完成，如ASTIfStatement和ASTSetDirective等。</p></li><li><p>叶子节点：它位于树的叶子上，没有子节点，这种类型的节点要么直接输出值，要么写到writer中，如ASTText和ASTTrue等。 </p></li></ol><p>我们再来看一下poc中的Velocity语句，和children中的节点信息</p><p>#set($x=’’) </p><p>#set($rt=$x.class.forName(‘java.lang.Runtime’)) </p><p>#set($ex=$rt.getRuntime().exec(‘open /Applications/Calculator.app/‘))</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/101.png" alt="101"></p><p>#set最终被解析为Velocity AST语法树中的ASTSetDirective类，根据上面的Velocity AST语法树的图我们看到ASTSetDirective节点有两个字节点</p><p>分别是ASTReference,和ASTExpression,</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/102.png" alt="102"></p><p>我们看到下标为0的ASTSetDirective类中有两个属性。right和left</p><p>分别代表了$x=’’中“=”号的两边，左边的ASTReference有两种可能，</p><p>一就是用来进行赋值操作的变量名</p><p>例：#set( $iAmVariable = ‘good!’)将字面量“good”赋值给名字为iAmVariable的变量</p><p>第二种也是赋值操作，但是赋值操作的目标是一个对象的某个属性</p><p>例：#set($Persion.name = ‘kkk’)</p><p>这种赋值方式的本质其实是调用Persion的setName方法。</p><p>区分这两种赋值方式我们可以动过观察此时的ASTReference这个节点是否有子节点来判断</p><p>譬如第一种#set( $iAmVariable = ‘good!’) 我们观察一下</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/103.png" alt="103"></p><p>可以看到最后的children属性为空</p><p>再观察第二种#set($Persion.name = ‘kkk’)</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/104.png" alt="104"></p><p>可以看到children属性中，是有子节点的。</p><p>Velocity通过ASTReference类来表示一个变量和变量的方法调用，ASTReference类如果有子节点，就表示这个变量有方法调用，方法调用同样是通过“.”来区分的，每一个点后面会对应一个方法调用。ASTReference有两种类型的子节点，分别是ASTIdentifier和ASTMethod。它们分别代表两种类型的方法调用，其中ASTIdentifier主要表示隐式的“get”和“set”类型的方法调用。而ASTMethod表示所有其他类型的方法调用，如所有带括号的方法调用都会被解析成ASTMethod类型的节点。</p><p>所谓隐式方法调用在Velocity中通常有如下几种。</p><p>1.Set类型，如#set($person.name=”junshan”)，如下：</p><p>·    person.setName(“junshan”)</p><p>·    person.setname(“junshan”)</p><p>·    person.put(“name”,”junshan”)</p><p>2.Get类型，如#set($name=$person.name)中的$person.name，如下：</p><p>·    person.getName()</p><p>·    person.getname()</p><p>·    person.get(“name”)</p><p>·    person.isname()</p><p>·    person.isName()</p><p>接下来我们来看ASTText节点，我们从节点图中看到ASTText没有任何子节点了，它是一个叶子结点，所以这种类型的节点要么直接输出值，要么写到writer中。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/105.png" alt="105"></p><p>到这里我们简单介绍了下Velocity AST语法树的一些基础知识。接下来我们回归我们程序的执行逻辑。</p><p>接下来的velocity模板引擎的执行逻辑现在这里简单说明一下，其实也很简单，其实就是会不停的遍历和执行各个子节点中的render方法</p><p>首先根据Velocity AST语法树的那张图，我们看到总的根节点是ASTprocess</p><p>所以会首先调用ASTprocess的render方法，具体在哪里调用呢，我们来看代码</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/106.png" alt="106"></p><p>继续跟入</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/107.png" alt="107"></p><p>当执行到((SimpleNode)data).render(ica,writer);</p><p>这行代码是，我们可以看到此时的data就是ASTprocess节点，所以Template.merge方法中调用了AST的根节点(ASTprocess)的render方法((SimpleNode)data).render(ica,writer);。此调用将迭代处理各个子节点render方法。如果是ASTReference类型的节点则在render方法中会调用execute方法执行反射替换相关处理。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/108.png" alt="108"></p><p>当进入到ASTprocess节点的render方法后会根据深度优先遍历算法开始遍历整棵树，遍历算法如下</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/109.png" alt="109"></p><p>即依次执行当前节点中的所有子节点的render方法，而每个节点的具体渲染规则都在其对应节点的render方法中实现。</p><p>这里我们可以打印一下我们poc所生成的语法树的详细结构</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/110.png" alt="110"></p><p>有了这个语法树结构后，程序的执行顺序就相当清晰了。</p><p>我们首先调用了ASTSetDirective类的render方法，看到该方法中首先调用了ASTExpression类value方法。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/111.png" alt="111"></p><p>而ASTExpression类value方法中又调用了它的子节点ASTStringLiteral</p><p>节点的value方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/112.png" alt="112"></p><p>最后ASTStringLiteral类的value方法返回一个字面量 </p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/113.png" alt="113"></p><p>接着返回到ASTSetDirective类执行它的第二个子节点也就是等号左边的$x</p><p>这里对应的是ASTReference类，这里是调用了ASTReference类的setValue方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/114.png" alt="114"></p><p>跟入方法后可以看到，由于该ASTReference节点没有子节点了，所以</p><p>直接执行</p><p>context.put(rootString, value);这里的value就是我们刚刚获得的“=”号右边的字面量</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/115.png" alt="115"></p><p>我们跟进去看一眼，能看得出后续就是赋值操作了，就不继续深入了</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/116.png" alt="116"></p><p>Poc第一行#set($x=’’)执行完毕</p><p>然后开始遍历第二个节点</p><p>第二个节点是ASTText节点，这个没什么好说的，就只是直接输出或着写到write中</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/117.png" alt="117"></p><p>然后开始遍历第三个节点</p><p>第三个节点仍然是ASTSetDirective类，它的render方法中仍然是先执行“=”号右边的子节点ASTExpression类的value方法</p><p>当执行到该方法时我们可以看到，此时的ASTExpression节点还有一个子节点，但是不是ASTStringLiteral节点了，而是ASTReference节点</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/118.png" alt="118"></p><p>所以此次执行的将会是ASTReference类的value方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/119.png" alt="119"></p><p>执行execute方法</p><p>我们重点看execute中的这行代码</p><p>Object result = getVariableValue(context, rootString);</p><p>这里返回的是我们给$x所赋的值“”然后程序会判断该值是否为空</p><p>如果一开始我们没有执行#set($x=’’)为$x赋一个值的话，此时会执行下面的</p><p>EventHandlerUtil.invalidGetMethod()方法，该方法会因为$x的值为空而不会向下继续执行。</p><p>所以我们poc的第一步就需要先为一个变量赋值，赋任何值都可以。</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/120.png" alt="120"></p><p>接下来执行到下面这些代码时，就开始遍历当前ASTReference的两个子节点</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/121.png" alt="121"></p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/122.png" alt="122"></p><p>执行完ASTIdentifier类的execute返回一个Class对象</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/123.png" alt="123"></p><p>接下来就是遍历第二个节点也就是ASTMethod节点，</p><p>执行ASTMethod节点的execute方法。 </p><p>Execute方法中执行了method的invoke方法跟入</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/124.png" alt="124"></p><p>最调用doInvoke方法</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/125.png" alt="125"></p><p>我们看一下doInvoke方法的内容</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/126.png" alt="126"></p><p>这一路下来的反射调用到最终获取Runtime类的class对象我用更直观的方式重写了一下方便理解</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/127.png" alt="127"></p><p>这一系列的操作等同于Class.forName(“java.lang.Runtime”)</p><p>后面的poc的第三行</p><p>#set($ex=$rt.getRuntime().exec(‘open /Applications/Calculator.app/‘))</p><p>执行逻辑和上面的如出一辙，就不再深入分析了，感兴趣的朋友可以自己跟踪代码分析一下。</p><p>最后放一下最终的一个调用链</p><p><img src="/2020/05/31/velocity-mo-ban-zhu-ru-lou-dong-shen-du-fen-xi/128.png" alt="128"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
